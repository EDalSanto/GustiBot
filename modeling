Product
-attributes: { 
	gusti_id: string,
	gusti_description: string 
	quantity(current): integer
	}
-associations: { 
	has_many: [reorders, purchases, activities],
	has_one: [ordering_parameter]
	has_many_through(middletable): [customers(purchases)]
	}
-reorder times can come from reorders in product index


OrderingParameter
-attributes: { 
	lead_time(months): integer,
	travel_time(months): integer,
	cover_time(months): integer,
	cant_ship: daterange,
	cant_produce: daterange,
	growth_factor: decimal,
#	connected_products: string array (all other faella),
	producer: string(used to identify products from same producer)
		-need method for related products
	product_id: integer(foreign key)
	}
-associations: {
	belongs_to: [product]
}


Reorder
-attributes: {
	date: date(precise date for calendar),
	quantity: integer,
	gusti_description: string,
	product_id: integer(foreign_key)
}
-associations {
	belongs_to: [product]
}


Activities
-attributes: {
	# item_id: string, index: true
	product_id: foreign_key, index: true
	sold: integer,
	date: time(**corresponding to first of month of sheet**)
}
-associations: {
	belongs_to: [product]
}


Customer
-attributes: {
	-name: string
}
-associations: {
	has_many: [purchases],
	has_many_through: [products through purchases]
}

Purchase
-attributes: {
	date: date(**corresponding to first of month of sheet**),
	customer_id: integer, foreign key
	product_id: integer, foreign key
	quantiy: integer
}
-associations: {
	belongs_to: [customers, product]
}

Reorder creations 
-Product.reorders.create..
-a Product has many activities, so it can check its activities over the last 6 months, find avergage, and then make calculations

Uploading
-UAR import(activities)	
	-create N new activities records for N products in database
	-current quantity for each product updated to qty on hand
-ItemsSold import(purchases)
	-create N new purchases for N customers in ItemsSold sheet
